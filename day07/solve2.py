print(len((lambda rules: (lambda func: lambda *args: func(func, *args))(lambda func, acc, boundary: func(func, acc.union(outer for outer, inners in rules.items() if any(b in inners for b in boundary)), {outer for outer, inners in rules.items() if any(b in inners for b in boundary)} - acc) if boundary else acc)(set(), {'shiny gold'}))((lambda input_: dict(map((lambda rule: (lambda outer, inners: (outer, {x.split(maxsplit=1)[1].split(' bag')[0]: int(x.split(maxsplit=1)[0]) for x in inners.split(', ') if 'no other bags' not in x}))(*rule.replace('.', '').split(' bags contain '))), input_)))(r.strip() for r in open('input.txt').readlines()))))
print((lambda rules: (lambda func: lambda *args: func(func, *args))(lambda func, parent, parent_count: (sum(func(func, child, parent_count * child_count) for child, child_count in rules[parent].items()) + parent_count if parent in rules else parent_count))('shiny gold', 1) - 1)((lambda input_: dict(map((lambda rule: (lambda outer, inners: (outer, {x.split(maxsplit=1)[1].split(' bag')[0]: int(x.split(maxsplit=1)[0]) for x in inners.split(', ') if 'no other bags' not in x}))(*rule.replace('.', '').split(' bags contain '))), input_)))(r.strip() for r in open('input.txt').readlines())))
